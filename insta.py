import telebot
import os
from telebot.async_telebot import AsyncTeleBot
import asyncio
import sys
import aiohttp
import tempfile
import shutil
from bs4 import BeautifulSoup

# –ß—Ç–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞
try:
    with open('bot-token.txt', 'r') as file:
        botToken = file.read().replace('\n', '')
except OSError as e:
    print ("Error while reading bot token from bot-token.txt file. Please re-create image with this file.")
    sys.exit()

if not botToken:
    print ("No token is read from bot-token.txt file. Please re-create docker image with valid file content.")
    sys.exit()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
print ("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
bot = AsyncTeleBot(botToken)

# --- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–æ—Ç–∞ ---
ADMIN_FILE = 'adm.txt' # –§–∞–π–ª, –≥–¥–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è username –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

def read_admin_username():
    """–ß–∏—Ç–∞–µ—Ç username –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ —Ñ–∞–π–ª–∞ adm.txt."""
    admin_username = None
    if os.path.exists(ADMIN_FILE):
        try:
            with open(ADMIN_FILE, 'r') as f:
                admin_username = f.read().strip()
        except OSError as e:
            print(f"Error reading admin username from {ADMIN_FILE}: {e}")
            sys.exit() # Exit if admin file cannot be read
    else:
        print(f"Error: {ADMIN_FILE} file not found. Please create this file and put the admin username inside.")
        sys.exit() # Exit if admin file is missing

    if not admin_username:
        print(f"Error: No admin username found in {ADMIN_FILE}. Please add the admin username to this file.")
        sys.exit() # Exit if admin username is empty

    return admin_username

ADMIN_USERNAME = read_admin_username() # –ß–∏—Ç–∞–µ–º username –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ —Ñ–∞–π–ª–∞

# --- –§–∞–π–ª—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –¥–æ—Å—Ç—É–ø–æ–º ---
USERS_FILE = 'users.txt'
ACCESS_LOG_FILE = 'access.txt'

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–º users.txt (—Ö—Ä–∞–Ω–∏–º usernames) ---
def read_users_file():
    """–ß–∏—Ç–∞–µ—Ç —Å–ø–∏—Å–æ–∫ usernames –∏–∑ —Ñ–∞–π–ª–∞ users.txt."""
    users = []
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, 'r') as f:
            for line in f:
                username = line.strip()
                if username:
                    users.append(username)
    return users

def write_users_file(users):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ usernames –≤ —Ñ–∞–π–ª users.txt."""
    with open(USERS_FILE, 'w') as f:
        for username in users:
            f.write(username + '\n')

def add_user_to_file(username):
    """–î–æ–±–∞–≤–ª—è–µ—Ç username –≤ —Ñ–∞–π–ª users.txt."""
    users = read_users_file()
    if username not in users:
        users.append(username)
        write_users_file(users)
        return True
    return False

def delete_user_from_file(username):
    """–£–¥–∞–ª—è–µ—Ç username –∏–∑ —Ñ–∞–π–ª–∞ users.txt."""
    users = read_users_file()
    if username in users:
        users.remove(username)
        write_users_file(users)
        return True
    return False

def is_user_authorized(message: telebot.types.Message):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–µ—Å—Ç—å –ª–∏ –µ–≥–æ username –≤ users.txt)."""
    authorized_users = read_users_file()
    username = message.from_user.username
    if username:
        return username in authorized_users
    return False

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –≤ access.txt (–ª–æ–≥–∏—Ä—É–µ–º usernames) ---
def log_access(message: telebot.types.Message):
    """–õ–æ–≥–∏—Ä—É–µ—Ç username –≤ access.txt, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â–µ –Ω–µ—Ç."""
    username = message.from_user.username
    if not username:
        return

    if not os.path.exists(ACCESS_LOG_FILE):
        open(ACCESS_LOG_FILE, 'a').close()

    with open(ACCESS_LOG_FILE, 'r+') as f:
        access_log = f.read().splitlines()
        if username not in access_log:
            f.write(username + '\n')

# --- –§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
async def download_video(url):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ –ø–æ URL."""
    print(f"Downloading video info from: {url}")
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                print(f"Info response status: {response.status}")
                print(f"Info response headers: {response.headers}")
                if response.status == 200:
                    html_content = await response.text()
                    soup = BeautifulSoup(html_content, 'html.parser')
                    video_meta_tag = soup.find('meta', attrs={'name': 'twitter:player:stream'})
                    if video_meta_tag:
                        video_url = video_meta_tag.get('content')
                        print(f"Video URL found in twitter:player:stream meta tag: {video_url}")
                    else:
                        video_meta_tag = soup.find('meta', attrs={'property': 'og:video'})
                        if video_meta_tag:
                            video_url = video_meta_tag.get('content')
                            print(f"Video URL found in og:video meta tag: {video_url}")
                        else:
                            print("Video URL not found in HTML meta tags.")
                            return None
                    if not video_url:
                        print("Video URL extraction failed.")
                        return None
                    absolute_video_url = "https://ddinstagram.com" + video_url
                    print(f"Starting video download from extracted absolute URL: {absolute_video_url}")
                    async with session.get(absolute_video_url) as video_response:
                        print(f"Video download status: {video_response.status}")
                        if video_response.status == 200:
                            temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.mp4')
                            with open(temp_file.name, 'wb') as f:
                                while True:
                                    chunk = await video_response.content.read(1024)
                                    if not chunk:
                                        break
                                    f.write(chunk)
                            print(f"Video downloaded to: {temp_file.name}")
                            return temp_file.name
                        else:
                            print(f"Error downloading video from URL {absolute_video_url}: Status code {video_response.status}")
                            return None
                else:
                    print(f"Error getting info from {url}: Status code {response.status}")
                    return None
    except Exception as e:
        print(f"Error during video download process: {e}")
        return None

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ ---

@bot.message_handler(commands=['start'])
async def start_command(message: telebot.types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    log_access(message)
    await bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ –∏–∑ Instagram.\n\n"
                             "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ Instagram Reels, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –µ–≥–æ —Å–∫–∞—á–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–±–µ! üöÄ")

@bot.message_handler(commands=['add', 'del', 'list'])
async def admin_commands(message: telebot.types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: /add, /del, /list."""
    command = message.text.split()[0].replace('/', '')
    admin_username = message.from_user.username

    if admin_username != ADMIN_USERNAME:
        await bot.send_message(message.chat.id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if command == 'list':
        users = read_users_file()
        users_list_text = "\n".join([f"@{u}" for u in users]) if users else "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç."
        await bot.send_message(message.chat.id, f"üë• –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{users_list_text}")

    elif command == 'add':
        if len(message.text.split()) < 2:
            await bot.send_message(message.chat.id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ username –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /add (–Ω–∞–ø—Ä–∏–º–µ—Ä, /add username).")
            return
        username_to_add = message.text.split()[1]
        if add_user_to_file(username_to_add):
            await bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username_to_add} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
        else:
            await bot.send_message(message.chat.id, f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username_to_add} —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ.")

    elif command == 'del':
        if len(message.text.split()) < 2:
            await bot.send_message(message.chat.id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ username –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /del (–Ω–∞–ø—Ä–∏–º–µ—Ä, /del username).")
            return
        username_to_delete = message.text.split()[1]
        if delete_user_from_file(username_to_delete):
            await bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username_to_delete} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
        else:
            await bot.send_message(message.chat.id, f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username_to_delete} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ.")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞) ---
@bot.message_handler(func=lambda message: message.text is not None and not message.text.startswith("/")) # Handle all text messages that are NOT commands
async def make_some(message: telebot.types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –≤–∫–ª—é—á–∞—è –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å—Å—ã–ª–∫—É Reel –∏ –æ—Ç–≤–µ—Ç –Ω–∞ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç."""

    if message.text.startswith("https://www.instagram.com/reel/"): # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Reel link
        if not is_user_authorized(message):
            await bot.send_message(message.chat.id, "üîí –ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n\n"
                                     "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ.")
            return

        log_access(message)

        instagram_url = message.text
        ddinstagram_url = instagram_url.replace("https://www.instagram.com", "https://ddinstagram.com")
        print(f"ddinstagram URL: {ddinstagram_url}")

        await bot.send_message(message.chat.id, "–°–∫–∞—á–∏–≤–∞—é Instagram Reels...")

        video_path = await download_video(ddinstagram_url)

        if video_path:
            try:
                file_size = os.path.getsize(video_path)
                print(f"Downloaded file size: {file_size} bytes")
                if file_size == 0:
                    print("Warning: Downloaded file is empty!")
                    await bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –°–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –æ–∫–∞–∑–∞–ª—Å—è –ø—É—Å—Ç—ã–º.")
                else:
                    with open(video_path, 'rb') as video_file:
                        await bot.send_video(message.chat.id, video_file)
                    print("Video sent successfully.")
            except Exception as e:
                await bot.send_message(message.chat.id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ. –û—à–∏–±–∫–∞: {e}")
            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                try:
                    os.remove(video_path)
                    print(f"Temporary file {video_path} deleted.")
                except OSError as e:
                    print(f"Error deleting temporary file {video_path}: {e}")

        else:
            await bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å ddinstagram.")
    elif message.text.startswith("https://www.instagram.com"): # –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å instagram.com, –Ω–æ –Ω–µ reel
        await bot.send_message(message.chat.id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Instagram Reel (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://www.instagram.com/reel/YourReelID/).\n"
                                 "–°—Å—ã–ª–∫–∏ –Ω–∞ –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –ø–æ—Å—Ç–æ–≤ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è.")
    else: # Handle ANY other text message
        await bot.send_message(message.chat.id, "ü§î –ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞ –Ω–∞ Instagram Reel. "
                                 "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Å—ã–ª–∫—É –Ω–∞ Instagram Reels, —á—Ç–æ–±—ã —è –º–æ–≥ —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ.")

asyncio.run(bot.polling())